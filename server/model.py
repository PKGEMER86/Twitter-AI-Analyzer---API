from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import AIMessage, HumanMessage, SystemMessage
from dotenv import load_dotenv, find_dotenv
from flask import Flask, request, jsonify


load_dotenv(find_dotenv())

app = Flask(__name__)

model = ChatGoogleGenerativeAI(model="gemini-1.5-flash")


tweet_example = "üåû Buongiorno a tutti! Oggi √® una giornata perfetta per una passeggiata all'aria aperta. üèûÔ∏è Non dimenticate di prendere un po' di tempo per voi stessi e godervi la natura! üå≥‚ú® #Buongiorno #Relax #VivereBene"

def evaluate_virality(tweet_prompt):
    viralit√† = [
        SystemMessage(content="Agisci come un Twitter AI Analyzer. Hai 10 anni di esperienza nel capire e valutare la possibilit√† che vada virale un Twitter. Dammi una valutazione di viralit√† da 1 a 10. Dammi solo il numero di valutazione non rispondere con altri informazioni. Ecco il mio tweet"),
        HumanMessage(content=tweet_example),
        AIMessage(content="4/10"),  # Questo √® un valore di esempio. Considera di rimuovere o modificare se necessario.
        HumanMessage(content=tweet_prompt)
    ]
    return model.invoke(viralit√†).content

def provide_feedback(tweet_prompt, viralit√†_r):
    feedback = [
        SystemMessage(content=f"Agisci come un Twitter AI Analyzer. Hai 10 anni di esperienza nel dare feedback ai Twitter. Ti dar√≤ un tweet che ha una probabilit√† di andare virale di {viralit√†_r} e tu mi dirai un feedback testuale. Non darmi dei tweet migliorati o valutazioni tue. Dammi solo un feedback testuale."),
        HumanMessage(content=tweet_example),
        AIMessage(content="Il tweet ha un messaggio positivo e incoraggiante, che pu√≤ risuonare bene con chi cerca ispirazione per la giornata. Tuttavia, potrebbe non avere un impatto virale elevato poich√© √® piuttosto generico e privo di elementi distintivi o di attualit√†. Per aumentare la probabilit√† di viralit√†, potresti considerare di aggiungere un elemento personale, una storia breve o una domanda che stimoli la partecipazione degli utenti. Inoltre, l'uso di hashtag √® corretto, ma una combinazione di hashtag pi√π mirati o di tendenze attuali potrebbe aiutare a raggiungere un pubblico pi√π ampio."),
        HumanMessage(content=tweet_prompt)
    ]
    return model.invoke(feedback).content

def improve_tweet(tweet_prompt, viralit√†_r):
    improve = [
        SystemMessage(content=f"Agisci come un Twitter AI Analyzer. Hai 10 anni di esperienza nel generare dei tweet con viralit√† 10/10. Ti dar√≤ un tweet che ha una probabilit√† di andare virale di {viralit√†_r} e lo rigenererai per ottenere un tweet con viralit√† 10/10. Non fornirmi altre spiegazioni o informazioni ulteriori. Dammi solo il tweet migliorato con viralit√† 10/10."),
        HumanMessage(content=tweet_example),
        AIMessage(content="üåü Buongiorno, Twitter! üåü Oggi √® il giorno ideale per una passeggiata nella natura e un po' di tempo per te stesso! üö∂‚Äç‚ôÇÔ∏èüå≥ Prenditi una pausa, respira profondamente e ricarica le energie. üíö‚ú® #ViviAlMassimo #Natura #SelfCare"),
        HumanMessage(content=tweet_prompt)
    ]
    return model.invoke(improve).content

@app.route("/TAIAPI", methods=['POST'])
def main():
    tweet_prompt = request.json.get("tweet_prompt")
    if not tweet_prompt:
        return jsonify({"error": "Tweet is required"}), 400

    try:
        viralit√†_r = evaluate_virality(tweet_prompt)
        feedback_r = provide_feedback(tweet_prompt, viralit√†_r)
        improve_r = improve_tweet(tweet_prompt, viralit√†_r)
        
        return jsonify({
            "viralit√†": viralit√†_r,
            "feedback": feedback_r,
            "improve": improve_r
        }), 201

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=False)
